import json
import asyncio
import websockets
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh bot Telegram
BOT_TOKEN = "8053826988:AAFlCP-OPKJdr9XegaryaRkX8gWmnEknwLg"
CHAT_ID = "-1002596735298"
ADMIN_IDS = [6020088518]

# URL WebSocket
WS_URL = "ws://163.61.110.10:8000/game_sunwin/ws?id=duy914c&key=dduy1514nsadfl"

# Tr·∫°ng th√°i bot
bot_running = False
websocket_task = None

# Kh·ªüi t·∫°o bot Telegram
bot = Bot(token=BOT_TOKEN)

async def send_message_to_group(message):
    """H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m Telegram"""
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn: {message}")
    except TelegramError as e:
        logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}")

async def process_websocket_message(message):
    """H√†m x·ª≠ l√Ω d·ªØ li·ªáu WebSocket"""
    try:
        # Parse d·ªØ li·ªáu JSON
        data = json.loads(message)
        required_fields = ["Phien", "Xuc_xac_1", "Xuc_xac_2", "Xuc_xac_3", "Tong", "Ket_qua"]
        if not all(field in data for field in required_fields):
            logger.warning("L·ªói: Thi·∫øu tr∆∞·ªùng d·ªØ li·ªáu JSON")
            return

        phien = data["Phien"]
        xuc_xac_1 = data["Xuc_xac_1"]
        xuc_xac_2 = data["Xuc_xac_2"]
        xuc_xac_3 = data["Xuc_xac_3"]
        tong = data["Tong"]
        ket_qua = data["Ket_qua"]

        # Chuy·ªÉn s·ªë th√†nh emoji
        num_to_emoji = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 
            6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü",
            11: "1Ô∏è‚É£1Ô∏è‚É£", 12: "1Ô∏è‚É£2Ô∏è‚É£", 13: "1Ô∏è‚É£3Ô∏è‚É£", 14: "1Ô∏è‚É£4Ô∏è‚É£", 
            15: "1Ô∏è‚É£5Ô∏è‚É£", 16: "1Ô∏è‚É£6Ô∏è‚É£", 17: "1Ô∏è‚É£7Ô∏è‚É£", 18: "1Ô∏è‚É£8Ô∏è‚É£"
        }

        # ƒê·ªãnh d·∫°ng tin nh·∫Øn
        msg = (
            f"K·∫øt qu·∫£ m·ªõi nh·∫•t sun.win\n"
            f"=====================\n"
            f"üé≤ Phi√™n: #{phien}\n"
            f"X√∫c x·∫Øc: {num_to_emoji.get(xuc_xac_1, str(xuc_xac_1))}‚Ä¢{num_to_emoji.get(xuc_xac_2, str(xuc_xac_2))}‚Ä¢{num_to_emoji.get(xuc_xac_3, str(xuc_xac_3))}\n"
            f"T·ªïng: {num_to_emoji.get(tong, str(tong))}\n"
            f"K·∫øt qu·∫£: {ket_qua}"
        )

        # G·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m
        await send_message_to_group(msg)
    except json.JSONDecodeError:
        logger.error("L·ªói: D·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá")
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

async def websocket_client():
    """H√†m ch·∫°y WebSocket v·ªõi reconnect"""
    global bot_running
    while True:
        if not bot_running:
            await asyncio.sleep(1)
            continue
        try:
            logger.info("ƒêang k·∫øt n·ªëi ƒë·∫øn WebSocket...")
            async with websockets.connect(WS_URL, ping_interval=20, ping_timeout=10) as ws:
                logger.info("ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn WebSocket")
                while bot_running:
                    try:
                        message = await asyncio.wait_for(ws.recv(), timeout=60)
                        if message:
                            await process_websocket_message(message)
                    except asyncio.TimeoutError:
                        logger.info("WebSocket timeout, ki·ªÉm tra k·∫øt n·ªëi...")
                        try:
                            await ws.ping()
                        except:
                            logger.warning("Ping failed, k·∫øt n·ªëi b·ªã l·ªói")
                            break
                    except websockets.ConnectionClosed as e:
                        logger.warning(f"K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng: {e}")
                        break
                    except Exception as e:
                        logger.error(f"L·ªói khi nh·∫≠n d·ªØ li·ªáu WebSocket: {e}")
                        break
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi WebSocket: {e}")
            if bot_running:
                logger.info("Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y...")
                await asyncio.sleep(5)

async def handle_telegram_updates():
    """H√†m x·ª≠ l√Ω updates t·ª´ Telegram"""
    global bot_running, websocket_task
    
    offset = None
    while True:
        try:
            updates = await bot.get_updates(offset=offset, timeout=10)
            for update in updates:
                offset = update.update_id + 1
                logger.info(f"Nh·∫≠n update: {update.update_id}")
                
                # X·ª≠ l√Ω tin nh·∫Øn
                if update.message:
                    user_id = update.message.from_user.id
                    username = update.message.from_user.username or "Unknown"
                    message_text = update.message.text or ""
                    
                    logger.info(f"Tin nh·∫Øn t·ª´ {username} (ID: {user_id}): {message_text}")
                    
                    if message_text == "/start":
                        logger.info(f"L·ªánh /start t·ª´ user ID: {user_id}, Admin IDs: {ADMIN_IDS}")
                        if user_id in ADMIN_IDS:
                            logger.info("User l√† admin, g·ª≠i menu")
                            keyboard = [
                                [
                                    InlineKeyboardButton("B·∫≠t bot", callback_data="start_bot"),
                                    InlineKeyboardButton("T·∫Øt bot", callback_data="stop_bot")
                                ]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text="Ch·ªçn h√†nh ƒë·ªông:",
                                reply_markup=reply_markup
                            )
                            logger.info("ƒê√£ g·ª≠i menu th√†nh c√¥ng")
                        else:
                            logger.info("User kh√¥ng ph·∫£i admin")
                            await bot.send_message(
                                chat_id=update.message.chat_id,
                                text=f"Xin ch√†o! ID c·ªßa b·∫°n l√†: {user_id}\nCh·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng bot n√†y."
                            )
                
                # X·ª≠ l√Ω callback query
                elif update.callback_query:
                    query = update.callback_query
                    user_id = query.from_user.id
                    
                    if user_id not in ADMIN_IDS:
                        await bot.answer_callback_query(
                            callback_query_id=query.id,
                            text="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y!"
                        )
                        continue
                    
                    await bot.answer_callback_query(callback_query_id=query.id)
                    
                    if query.data == "start_bot":
                        if bot_running:
                            await bot.send_message(
                                chat_id=query.message.chat_id,
                                text="Bot ƒë√£ ƒëang ch·∫°y!"
                            )
                        else:
                            bot_running = True
                            if websocket_task is None or websocket_task.done():
                                websocket_task = asyncio.create_task(websocket_client())
                            await bot.send_message(
                                chat_id=query.message.chat_id,
                                text="Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t!"
                            )
                    
                    elif query.data == "stop_bot":
                        if not bot_running:
                            await bot.send_message(
                                chat_id=query.message.chat_id,
                                text="Bot ƒë√£ ƒëang t·∫Øt!"
                            )
                        else:
                            bot_running = False
                            if websocket_task and not websocket_task.done():
                                websocket_task.cancel()
                                try:
                                    await websocket_task
                                except asyncio.CancelledError:
                                    pass
                            await bot.send_message(
                                chat_id=query.message.chat_id,
                                text="Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt!"
                            )
                            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω Telegram updates: {e}")
            await asyncio.sleep(1)

async def main():
    """H√†m ch√≠nh"""
    global websocket_task
    
    logger.info("ƒêang kh·ªüi ƒë·ªông bot...")
    logger.info(f"Bot Token: {BOT_TOKEN[:10]}...")
    logger.info(f"Chat ID: {CHAT_ID}")
    logger.info(f"Admin IDs: {ADMIN_IDS}")
    logger.info(f"WebSocket URL: {WS_URL}")
    
    try:
        # Ki·ªÉm tra bot token
        me = await bot.get_me()
        logger.info(f"Bot ƒë√£ s·∫µn s√†ng: @{me.username}")
        
        # Ch·∫°y handler cho Telegram updates
        await handle_telegram_updates()
        
    except KeyboardInterrupt:
        logger.info("Bot ƒëang d·ª´ng...")
    except Exception as e:
        logger.error(f"L·ªói khi ch·∫°y bot: {e}")
    finally:
        # D·ªçn d·∫πp
        if websocket_task and not websocket_task.done():
            websocket_task.cancel()

if __name__ == "__main__":
    asyncio.run(main())